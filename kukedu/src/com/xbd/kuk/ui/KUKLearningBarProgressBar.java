package com.xbd.kuk.ui;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.ColorFilter;import android.graphics.Paint;import android.graphics.RectF;import android.graphics.drawable.ColorDrawable;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.widget.ImageView;@SuppressLint("ResourceAsColor")public class KUKLearningBarProgressBar extends ImageView {	private Context mContext;	private Bitmap mGrayBgBitmap;	private Bitmap mMoveBitmap;	private int mGrayW;	private int mGrayH;	private int mMoveW;	private int mMoveH;	private int mThisH;	private int mThisW;	private static final int CIRCLE_DEGREE = 360;	private float mStart = -90;	private float mSweep;	public KUKLearningBarProgressBar(Context context, AttributeSet attrs,			int defStyle) {		super(context, attrs, defStyle);		// TODO Auto-generated constructor stub		init(context);	}	public KUKLearningBarProgressBar(Context context, AttributeSet attrs) {		super(context, attrs);		// TODO Auto-generated constructor stub		init(context);	}	public KUKLearningBarProgressBar(Context context) {		super(context);		// TODO Auto-generated constructor stub		init(context);	}	private void init(Context context) {	}	@Override	protected void onDraw(Canvas canvas) {		// TODO Auto-generated method stub		super.onDraw(canvas);		mThisW = getMeasuredWidth();		mThisH = getMeasuredHeight();		drawArc(canvas);	}	@SuppressLint("ResourceAsColor")	private void drawArc(Canvas canvas) {		int radius = mThisW / 2 - 12;		Paint p = new Paint();		p.setAntiAlias(true);		p.setStyle(Paint.Style.FILL);		// p.setStrokeWidth(12);		p.setColor(0x882f90ba);		RectF rectf = new RectF(12, 12, radius * 2 + 12, radius * 2 + 12);		canvas.drawArc(rectf, mStart, mSweep, true, p);	}	public void update(float mProgressValue) {		mSweep = (int) (CIRCLE_DEGREE * mProgressValue);		if (mSweep >= CIRCLE_DEGREE) {			mSweep = CIRCLE_DEGREE;		} else {			invalidate();		}	}	private float getDenstiyValue(float value) {		return getDensity(getContext()) * value;	}	private float getDensity(Context context) {		Resources resources = context.getResources();		DisplayMetrics dm = resources.getDisplayMetrics();		return dm.density;	}}